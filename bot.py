import os
import random

import discord
from discord.ext import commands

import yt_dlp
import asyncio

from dotenv import load_dotenv

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="-", intents=intents)

load_dotenv()
token = os.getenv("BOT_TOKEN")


ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn'
}

greetings = ["–ü—Ä–∏–≤–µ—Ç–∏–∫", "–•–∞–π", "–ô–æ—É", "–°–∞–ª—é—Ç", "–•—ç–ª–ª–æ—É", "–ß—ë –∫–∞–∫", "–ó–¥–∞—Ä–æ–≤–∞", "–ô–æ, –∑–¥–∞—Ä–æ–≤–∞", "–∫—É"]
hates = ["–•—É–π–ª–æ","–ü–∏–¥–∞–≥–æ–≥","–û–≥—É–∑–æ–∫","–•—É–µ—Ç–∞","–ï–±–ª–∞–Ω","–õ–∞–±—É–±–∞","–ß–µ–ø—É—à–∏–ª–æ"]
emojis = ["ü§ñ", "üëæ", "üõ∏", "ü™ê", "ü¶ø", "ü§Ø", "üëΩ", "üõ∞Ô∏è", ""]




playlists = {
    1: [
        "TV„Ç¢„Éã„É°„Äé„ÉÄ„É≥„ÉÄ„ÉÄ„É≥„ÄèHAYASii„ÄåHunting Soul„Äç„Äêlyric video„Äë",
        "Á±≥Ê¥•ÁéÑÂ∏´ Kenshi Yonezu - KICKBACK",
        "Á±≥Ê¥•ÁéÑÂ∏´  Kenshi Yonezu - IRIS OUT",
        "Unravel tk tokyo ghoul 1 opening"
    ],
    # 2: [
    #     "Song A",
    #     "Song B",
    #     "Song C"
    # ],
    # 3: [
    #     "Track X",
    #     "Track Y"
    # ],
    # 4: [
    #     "Some Other Track 1",
    #     "Some Other Track 2"
    # ]
}
history = []
queues = {}

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")

def get_audio_url(query):
    ydl_opts = {'format': 'bestaudio/best', 'noplaylist': True, 'default_search': 'ytsearch', 'quiet': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(query, download=False)
        url = info['entries'][0]['url'] if 'entries' in info else info['url']
        title = info['entries'][0]['title'] if 'entries' in info else info['title']
        return {'title': title, 'url': url}

async def play_next(ctx, channel_id):
    if not queues.get(channel_id):
        await ctx.send("–û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!")
        voice = ctx.guild.voice_client
        if voice:
            await voice.disconnect()
        return

    song = queues[channel_id].pop(0)
    track = get_audio_url(song['title'])
    if not track or 'url' not in track:
        await ctx.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è {song['title']}")
        await play_next(ctx, channel_id)
        return

    voice = ctx.guild.voice_client
    if not voice:
        await ctx.send("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!")
        return



    source = discord.FFmpegPCMAudio(track['url'], **ffmpeg_options)
    voice.current = track
    history.append(track)

    def after_play(err):
        if err:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏: {err}")
        asyncio.run_coroutine_threadsafe(play_next(ctx, channel_id), bot.loop)

    try:
        voice.play(source, after=after_play)
        await ctx.send(f"‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç: {track['title']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ffmpeg: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {track['title']}")
        await play_next(ctx, channel_id)

@bot.command()
async def echo(ctx):
    await ctx.send(f"—è –∂–∏–≤–æ–π!!")


@bot.command()
async def –ø—Ä–∏–≤–µ—Ç(ctx):
    greeting = random.choice(greetings)
    hate_speech = random.choice(hates)
    emoji = random.choice(emojis)
    await ctx.send(f"{greeting} {hate_speech} {emoji}")

@bot.command()
async def list(ctx, *, query):
    ydl_opts = {'format': 'bestaudio/best', 'noplaylist': True, 'default_search': 'ytsearch', 'quiet': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(query, download=False)
        url = info['entries'][0]['url'] if 'entries' in info else info['url']
        title = info['entries'][0]['title'] if 'entries' in info else info['title']

    channel_id = ctx.author.voice.channel.id if ctx.author.voice else None
    if channel_id is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    if channel_id not in queues:
        queues[channel_id] = []

    queues[channel_id].append({'title': title, 'url': url})
    await ctx.send(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {title}")

@bot.command()
async def play(ctx):
    if ctx.author.voice is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    channel = ctx.author.voice.channel
    if ctx.voice_client is None:
        await channel.connect()
    elif ctx.voice_client.channel != channel:
        await ctx.voice_client.move_to(channel)

    channel_id = ctx.voice_client.channel.id
    if channel_id not in queues or not queues[channel_id]:
        await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è! –î–æ–±–∞–≤—å —Ç—Ä–µ–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π !list")
        return

    voice = ctx.voice_client
    if not voice.is_playing():
        song = queues[channel_id].pop(0)
        voice.current = song
        if all(song['title'] != s['title'] for s in history):
            history.append(song)
        voice.play(discord.FFmpegPCMAudio(song['url']), after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx, channel_id), bot.loop))
        await ctx.send(f"‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç: {song['title']}")
    else:
        await ctx.send("–ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç!")

@bot.command()
async def skip(ctx):
    voice = ctx.voice_client
    if voice and voice.is_playing():
        voice.stop()
        await ctx.send("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Å–Ω—é!")
    else:
        await ctx.send("–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.")

@bot.command()
async def stop(ctx):
    voice = ctx.voice_client
    if voice:
        voice.stop()
        queues[voice.channel.id] = []
        await voice.disconnect()
        await ctx.send("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")
    else:
        await ctx.send("–ë–æ—Ç –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

@bot.command()
async def remove(ctx, *, query):
    if ctx.author.voice is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    channel_id = ctx.author.voice.channel.id
    if channel_id not in queues or not queues[channel_id]:
        await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")
        return

    removed = [song for song in queues[channel_id] if query.lower() in song['title'].lower()]
    if not removed:
        await ctx.send(f"–¢—Ä–µ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏.")
        return

    queues[channel_id] = [song for song in queues[channel_id] if query.lower() not in song['title'].lower()]
    await ctx.send(f"‚ùå –£–¥–∞–ª–µ–Ω–æ {len(removed)} —Ç—Ä–µ–∫(–æ–≤) –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{query}'.")

@bot.command()
async def info(ctx):
    if ctx.author.voice is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    channel_id = ctx.author.voice.channel.id
    voice = ctx.voice_client

    if voice and voice.is_playing():
        now_playing = getattr(voice, 'current', None)
        current_song = now_playing['title'] if now_playing else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message = f"‚ñ∂Ô∏è –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **{current_song}**\n"
    else:
        message = "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.\n"

    if channel_id in queues and queues[channel_id]:
        message += "üìÉ –û—á–µ—Ä–µ–¥—å:\n"
        for i, song in enumerate(queues[channel_id], start=1):
            message += f"{i}. {song['title']}\n"
    else:
        message += "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."

    await ctx.send(message)

@bot.command()
async def playlist(ctx, number: int):
    if ctx.author.voice is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    if number not in playlists:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    channel_id = ctx.author.voice.channel.id
    if channel_id not in queues:
        queues[channel_id] = []

    ydl_opts = {'format': 'bestaudio/best', 'noplaylist': True, 'default_search': 'ytsearch', 'quiet': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        added_tracks = []
        for track in playlists[number]:
            info = ydl.extract_info(track, download=False)
            url = info['entries'][0]['url'] if 'entries' in info else info['url']
            title = info['entries'][0]['title'] if 'entries' in info else info['title']
            queues[channel_id].append({'title': title, 'url': url})
            added_tracks.append(title)

    await ctx.send(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {len(added_tracks)} —Ç—Ä–µ–∫(–æ–≤) –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ #{number}:\n" + "\n".join(added_tracks))

@bot.command()
async def story(ctx):
    if not history:
        await ctx.send("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    last_tracks = history[-10:]
    text = "\n".join([f"{i+1}. {song['title']}" for i, song in enumerate(last_tracks)])

    await ctx.send("üïò –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–∫–æ–≤:\n" + text)


@bot.command()
async def repeat(ctx):
    if ctx.author.voice is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return

    channel_id = ctx.author.voice.channel.id
    if channel_id not in queues:
        queues[channel_id] = []

    added_tracks = []
    for track in history[-10:]:
        queues[channel_id].append({'title': track['title'], 'url': track['url']})
        added_tracks.append(track['title'])

    if added_tracks:
        await ctx.send(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {len(added_tracks)} —Ç—Ä–µ–∫(–æ–≤) –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:\n" + "\n".join(added_tracks))
    else:
        await ctx.send("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!")

bot.run(token)




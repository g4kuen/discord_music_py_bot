import yt_dlp
import random
import discord
import asyncio


ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn'
}
url_cache = {}
history = []
queues = {}
locked_tracks = {}
greetings = ["–ü—Ä–∏–≤–µ—Ç–∏–∫", "–•–∞–π", "–ô–æ—É", "–°–∞–ª—é—Ç", "–•—ç–ª–ª–æ—É", "–ß—ë –∫–∞–∫", "–ó–¥–∞—Ä–æ–≤–∞", "–ô–æ, –∑–¥–∞—Ä–æ–≤–∞", "–∫—É"]
hates = ["–•—É–π–ª–æ","–ü–∏–¥–∞–≥–æ–≥","–û–≥—É–∑–æ–∫","–•—É–µ—Ç–∞","–ï–±–ª–∞–Ω","–õ–∞–±—É–±–∞","–ß–µ–ø—É—à–∏–ª–æ"]
emojis = ["ü§ñ", "üëæ", "üõ∏", "ü™ê", "ü¶ø", "ü§Ø", "üëΩ", "üõ∞Ô∏è", ""]

playlists = {
    1: [
        "„ÄêAdo„Äë„ÇÆ„É©„ÇÆ„É©",
        "TV„Ç¢„Éã„É°„Äé„ÉÄ„É≥„ÉÄ„ÉÄ„É≥„ÄèHAYASii„ÄåHunting Soul„Äç„Äêlyric video„Äë",
        "Á±≥Ê¥•ÁéÑÂ∏´ Kenshi Yonezu - KICKBACK",
        "Á±≥Ê¥•ÁéÑÂ∏´  Kenshi Yonezu - IRIS OUT",
    ]
}


def get_audio_url(title):
    for track in history:
        if track['title'].lower() == title.lower():
            return track


    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'default_search': 'ytsearch',
        'quiet': True
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(title, download=False)
            url = info['entries'][0]['url'] if 'entries' in info else info['url']
            yt_title = info['entries'][0]['title'] if 'entries' in info else info['title']

            track = {'title': yt_title, 'url': url}

            return track
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ {title}: {e}")
        return None


async def connect_to_voice(ctx):
    if ctx.author.voice is None:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return None

    channel = ctx.author.voice.channel
    voice_client = ctx.voice_client

    if voice_client is None:
        voice_client = await channel.connect()
        await ctx.send(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É: **{channel.name}**")
    elif voice_client.channel != channel:
        await voice_client.move_to(channel)
        await ctx.send(f"üîÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –∫–∞–Ω–∞–ª: **{channel.name}**")
    else:
        await ctx.send(f"üéß –£–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –∫–∞–Ω–∞–ª—É: **{channel.name}**")

    return voice_client


async def play_next(ctx, bot, channel_id):
    if locked_tracks.get(channel_id):
        if history:
            song = history[-1]
        else:
            await ctx.send("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å!")
            return

    else:
        if not queues.get(channel_id):
            await ctx.send("–û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!")
            voice = ctx.guild.voice_client
            if voice:
                await voice.disconnect()
            return

        song = queues[channel_id].pop(0)

    track = get_audio_url(song['title'])

    if not track or 'url' not in track:
        await ctx.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è {song['title']}")
        await play_next(ctx, bot, channel_id)
        return

    voice = ctx.guild.voice_client
    if not voice:
        await ctx.send("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!")
        return

    source = discord.FFmpegPCMAudio(track['url'], **ffmpeg_options)
    voice.current = track
    if not locked_tracks.get(channel_id):
        history.append(track)

    def after_play(err):
        if err:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏: {err}")
        asyncio.run_coroutine_threadsafe(play_next(ctx, bot, channel_id), bot.loop)

    try:
        voice.play(source, after=after_play)
        await ctx.send(f"‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç: {track['title']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ffmpeg: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {track['title']}")
        await play_next(ctx, bot, channel_id)


def random_greeting():
    return f"{random.choice(greetings)} {random.choice(hates)} {random.choice(emojis)}"


def add_to_queue(channel_id, title, url):
    if channel_id not in queues:
        queues[channel_id] = []
    queues[channel_id].append({'title': title, 'url': url})


def get_queue(channel_id):
    return queues.get(channel_id, [])


def clear_queue(channel_id):
    queues[channel_id] = []


async def add_playlist_to_queue(channel_id, number, filepath="playlists.txt"):
    playlists = load_playlists_from_file(filepath)
    if number not in playlists:
        print(f"‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç #{number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []

    if channel_id not in queues:
        queues[channel_id] = []

    ydl_opts = {
        "format": "bestaudio/best",
        "noplaylist": True,
        "default_search": "ytsearch",
        "quiet": True,
    }

    added_tracks = []

    async def fetch_track(track):
        try:
            def _extract():
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    return ydl.extract_info(track, download=False)

            info = await asyncio.to_thread(_extract)
            url = info["entries"][0]["url"] if "entries" in info else info["url"]
            title = info["entries"][0]["title"] if "entries" in info else info["title"]

            queues[channel_id].append({"title": title, "url": url})
            added_tracks.append(title)

            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {title}")

        except asyncio.TimeoutError:
            print(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∞: {track}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ '{track}': {e}")

    for track in playlists[number]:
        try:
            await asyncio.wait_for(fetch_track(track), timeout=20)
        except asyncio.TimeoutError:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {track}")

    return added_tracks


def load_playlists_from_file(filepath="playlists.txt"):
    playlists = {}
    current_id = None
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                if line.startswith("#"):
                    current_id = int(line[1:])
                    playlists[current_id] = []
                elif current_id is not None:
                    playlists[current_id].append(line)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π playlists.txt —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.")
    return playlists